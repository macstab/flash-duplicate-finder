name: Flash Duplicate Finder - Multi-Architecture Build with Jib and GraalVM

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop

# not in parallel as of the release and merge topic
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: amd64
          - arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Step 2: Check commit message
      # Set switch if we need to skip some parts of the pipeline ( no pull requests and no tags! )
      - name: Check commit message
        if: ${{ !startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' }}
        id: check_commit
        run: |
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
          git pull
          fi
          commit_message=$(git log --format=%B -n 1 ${{ github.event.after }})
          if [[ "$commit_message" == "chore(release):"* ]]; then
            echo "Commit message is a release commit. Skipping build."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Commit message is not a release commit. Proceeding with build."
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      # test the project including tests and codestyle
      - name: Check the project
        uses: docker://ghcr.io/graalvm/graalvm-ce:22.3.3
        with:
          entrypoint: /bin/sh
          args: -c "./gradlew check --console=plain"

      # execute on amd64 runs only.
      - name: debug vars
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "GITHUB_EVENT_PATH: $GITHUB_EVENT_PATH"
          echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
          echo "GITHUB_ACTION: $GITHUB_ACTION"
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
          echo "GITHUB_SERVER_URL: $GITHUB_SERVER_URL"
          echo "GITHUB_API_URL: $GITHUB_API_URL"
          echo "GITHUB_GRAPHQL_URL: $GITHUB_GRAPHQL_URL"
          echo "GITHUB_ENV: $GITHUB_ENV"
          echo "GITHUB_TOKEN: $GITHUB_TOKEN"
          echo "GITHUB_ACTION_REPOSITORY: $GITHUB_ACTION_REPOSITORY"
          echo "GITHUB_ACTION_REF: $GITHUB_ACTION_REF"
          echo "GITHUB_PATH: $GITHUB_PATH"
          echo "GITHUB_RETENTION_DAYS: $GITHUB_RETENTION_DAYS"
          echo "GITHUB_RUN_ID: $GITHUB_RUN_ID"
          echo "GITHUB_RUN_NUMBER: $GITHUB_RUN_NUMBER"
          echo "GITHUB_RUN_ATTEMPT: $GITHUB_RUN_ATTEMPT"
          echo "GITHUB_JOB: $GITHUB_JOB"
          echo "GITHUB_JOB_STATUS: $GITHUB_JOB_STATUS"
          echo "GITHUB_ACTIONS: $GITHUB_ACTIONS"
          echo "MATRIX_ARCH: $MATRIX_ARCH"
          echo "SKIP_TESTS: $SKIP_TESTS"
        env:
            GITHUB_REF: ${{ github.ref }}
            GITHUB_EVENT_NAME: ${{ github.event_name }}
            GITHUB_EVENT_PATH: ${{ github.event_path }}
            GITHUB_WORKFLOW: ${{ github.workflow }}
            GITHUB_ACTION: ${{ github.action }}
            GITHUB_ACTOR: ${{ github.actor }}
            GITHUB_REPOSITORY: ${{ github.repository }}
            GITHUB_WORKSPACE: ${{ github.workspace }}
            GITHUB_SHA: ${{ github.sha }}
            GITHUB_HEAD_REF: ${{ github.head_ref }}
            GITHUB_BASE_REF: ${{ github.base_ref }}
            GITHUB_SERVER_URL: ${{ github.server_url }}
            GITHUB_API_URL: ${{ github.api_url }}
            GITHUB_GRAPHQL_URL: ${{ github.graphql_url }}
            GITHUB_ENV: ${{ github.env }}
            GITHUB_TOKEN: ${{ github.token }}
            GITHUB_ACTION_REPOSITORY: ${{ github.action_repository }}
            GITHUB_ACTION_REF: ${{ github.action_ref }}
            GITHUB_PATH: ${{ github.path }}
            GITHUB_RETENTION_DAYS: ${{ github.retention_days }}
            GITHUB_RUN_ID: ${{ github.run_id }}
            GITHUB_RUN_NUMBER: ${{ github.run_number }}
            GITHUB_RUN_ATTEMPT: ${{ github.run_attempt }}
            GITHUB_JOB: ${{ github.job }}
            GITHUB_JOB_STATUS: ${{ github.job_status }}
            GITHUB_ACTIONS: ${{ github.actions }}
            MATRIX_ARCH: ${{ matrix.arch }}
            SKIP_TESTS: ${{ steps.check_commit.outputs.skip }}
      - name: Release with semantic release
        id: semantic_release
        uses: docker://macstab/semantic-release-maven-gradle-nodejs-python-git-jq:1.1.2
        if: github.ref == 'refs/heads/main' && matrix.arch == 'amd64'
        with:
          entrypoint: /bin/sh
          workdir: /home/runner/work/${{ github.repository }}/${{ github.repository }}
          branches: 'main'
          args: -c "pwd && cp /configs/$CONFIG_FILE .releaserc && git config --global --add safe.directory /github/workspace && npx semantic-release --branches $RELEASE_BRANCH"
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_ENV: production
          GH_URL: https://github.com/${{ github.repository }}.git
          RELEASE_BRANCH: main
          CONFIG_FILE: .releaserc-gradle.json
          DEBUG: semantic-release:*

      # merge back on amd64 only!
      - name: Merge main -> develop
        if: ${{ steps.check_commit.outputs.skip == 'false' && !startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && matrix.arch == 'amd64' }}
        uses: docker://macstab/semantic-release-maven-gradle-nodejs-python-git-jq:1.1.2
        with:
          entrypoint: /bin/sh
          workdir: /home/runner/work/${{ github.repository }}/${{ github.repository }}
          args: "-c \"TAG_NAME=${GITHUB_REF#refs/tags/} && echo Release is $TAG_NAME && git config --global --add safe.directory /github/workspace && git config --global user.email '${{ secrets.BOT_USER_EMAIL }}' && git config --global user.name '${{ secrets.BOT_USER_NAME }}' && git fetch -a origin && git fetch origin ${INPUT_FROM_BRANCH} && git checkout ${INPUT_FROM_BRANCH} && git fetch origin ${INPUT_TARGET_BRANCH} && git checkout ${INPUT_TARGET_BRANCH} && git pull && COMMIT_HASH=$(git rev-parse ${TAG_NAME}) && git cherry-pick -Xtheirs $COMMIT_HASH --allow-empty && git push https://$GH_USERNAME:$GH_PASSWORD@github.com/${{ github.repository }}.git develop \""
        env:
          INPUT_FROM_BRANCH: 'main'
          INPUT_TARGET_BRANCH: 'develop'
          GH_USERNAME: ${{ secrets.BOT_USER_NAME }}
          GH_PASSWORD: ${{ secrets.BOT_GITHUB_TOKEN }}

      - name: Get latest release
        if: steps.check_commit.outputs.skip == 'false' && github.ref == 'refs/heads/main'
        id: latest_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # build all but main
      - name: Build and push with Jib as development
        if: steps.check_commit.outputs.skip == 'false' && github.ref != 'refs/heads/main' && github.event_name != 'pull_request'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          ARCHITECTURE: ${{ matrix.arch }}
          TAG: ${{ github.ref_name }}
        uses: docker://ghcr.io/graalvm/graalvm-ce:22.3.3
        with:
          entrypoint: /bin/sh
          args: -c "./gradlew jibNativeImage --console=plain"

      - name: Build and push with Jib as development
        if: steps.check_commit.outputs.skip == 'false' && github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          ARCHITECTURE: ${{ matrix.arch }}
        uses: docker://ghcr.io/graalvm/graalvm-ce:22.3.3
        with:
          entrypoint: /bin/sh
          args: -c "export TAG=${{ fromJson(steps.latest_release.outputs.data).tag_name }} && ./gradlew jibNativeImage --console=plain"